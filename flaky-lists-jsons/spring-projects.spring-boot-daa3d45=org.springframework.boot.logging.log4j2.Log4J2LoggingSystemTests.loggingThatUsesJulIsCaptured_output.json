{"dts": [{"revealed": {"testRunId": "1601972977431-1299429a-2424-44e3-ac90-fb05f24fe4f1", "order": ["org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.environmentIsExposed", "org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.validateReadyFlag", "org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.eventsFromOtherContextsAreIgnored", "org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrarTests.shutdownApp", "org.springframework.boot.ansi.AnsiColorsTests.getClosestWhenCloseShouldReturnAnsiColor", "org.springframework.boot.ansi.AnsiColorsTests.getClosestWhenExactMatchShouldReturnAnsiColor", "org.springframework.boot.ansi.AnsiOutputTests.encoding", "org.springframework.boot.ansi.AnsiPropertySourceTests.encodeDisabled", "org.springframework.boot.ansi.AnsiPropertySourceTests.encodeEnabled", "org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsiStyle", "org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsi", "org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsiColor", "org.springframework.boot.ansi.AnsiPropertySourceTests.getAnsiBackground", "org.springframework.boot.ansi.AnsiPropertySourceTests.getMissing", "org.springframework.boot.BannerTests.testBannerInContext", "org.springframework.boot.BannerTests.testDisableBannerInContext", "org.springframework.boot.BannerTests.testCustomBanner", "org.springframework.boot.BannerTests.testDefaultBannerInLog", "org.springframework.boot.BannerTests.testCustomBannerInContext", "org.springframework.boot.BannerTests.testDefaultBanner", "org.springframework.boot.BeanDefinitionLoaderTests.loadClass", "org.springframework.boot.BeanDefinitionLoaderTests.loadClassName", "org.springframework.boot.BeanDefinitionLoaderTests.loadResourceName", "org.springframework.boot.BeanDefinitionLoaderTests.loadGroovyName", "org.springframework.boot.BeanDefinitionLoaderTests.loadPackageNameWithoutDot", "org.springframework.boot.BeanDefinitionLoaderTests.loadGroovyResource", "org.springframework.boot.BeanDefinitionLoaderTests.loadPackageName", "org.springframework.boot.BeanDefinitionLoaderTests.loadGroovyResourceWithNamespace", "org.springframework.boot.BeanDefinitionLoaderTests.loadPackageAndClassDoesNotDoubleAdd", "org.springframework.boot.BeanDefinitionLoaderTests.loadPackage", "org.springframework.boot.BeanDefinitionLoaderTests.loadXmlResource", "org.springframework.boot.builder.SpringApplicationBuilderTests.contextWithClassLoader", "org.springframework.boot.builder.SpringApplicationBuilderTests.specificApplicationContextClass", "org.springframework.boot.builder.SpringApplicationBuilderTests.initializersCreatedOnce", "org.springframework.boot.builder.SpringApplicationBuilderTests.sourcesWithBoundSources", "org.springframework.boot.builder.SpringApplicationBuilderTests.initializersCreatedOnceForChild", "org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesWithRepeatSeparator", "org.springframework.boot.builder.SpringApplicationBuilderTests.initializersIncludeDefaults", "org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesAsProperties", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationThatIsBuiltThenRun", "org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesAsMap", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationThatIsRunDirectly", "org.springframework.boot.builder.SpringApplicationBuilderTests.profileAndProperties", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationWithChildShutdown", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentWithDifferentProfile", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextIdentical", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstWithDifferentProfileAndExplicitEnvironment", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextWithClassLoader", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstWithDifferentProfile", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstCreation", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstCreationWithProfileAndDefaultArgs", "org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testApplicationProperties", "org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testUnparseableApplicationProperties", "org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testApplicationUris", "org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testServicePropertiesWithoutNA", "org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testNullApplicationProperties", "org.springframework.boot.cloud.cloudfoundry.CloudFoundryVcapEnvironmentPostProcessorTests.testServiceProperties", "org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenEnvironmentIsNullShouldReturnNull", "org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenNotInCloudShouldReturnNull", "org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasDynoShouldReturnHeroku", "org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasVcapServicesShouldReturnCloudFoundry", "org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasHcLandscapeShouldReturnSap", "org.springframework.boot.cloud.CloudPlatformTests.getActiveWhenHasVcapApplicationShouldReturnCloudFoundry", "org.springframework.boot.context.annotation.ConfigurationsTests.createShouldSortClasses", "org.springframework.boot.context.annotation.ConfigurationsTests.createWhenClassesIsNullShouldThrowException", "org.springframework.boot.context.annotation.ConfigurationsTests.getClassesShouldMergeByClassAndSort", "org.springframework.boot.context.annotation.UserConfigurationsTests.ofShouldCreateUnorderedConfigurations", "org.springframework.boot.context.ApplicationPidFileWriterTests.continueWhenPidFileIsReadOnly", "org.springframework.boot.context.ApplicationPidFileWriterTests.createPidFile", "org.springframework.boot.context.ApplicationPidFileWriterTests.tryReadyEvent", "org.springframework.boot.context.ApplicationPidFileWriterTests.overridePidFile", "org.springframework.boot.context.ApplicationPidFileWriterTests.tryEnvironmentPreparedEvent", "org.springframework.boot.context.ApplicationPidFileWriterTests.overridePidFileWithSpring", "org.springframework.boot.context.ApplicationPidFileWriterTests.throwWhenPidFileIsReadOnlyWithSpring", "org.springframework.boot.context.ApplicationPidFileWriterTests.throwWhenPidFileIsReadOnly", "org.springframework.boot.context.ApplicationPidFileWriterTests.withNoEnvironment", "org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.disabled", "org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.disabledViaApplicationProperties", "org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.enabled", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceFromAdditionalLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlTwoProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.systemPropertyWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.twoProfilesFromProperties", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfilesWithWhitespace", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlNegatedProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfilesWhenListProvided", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlNegatedProfilesWithProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileCanBeChanged", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsAnd", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsNoMatch", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsComplex", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesAndSwitchOneOffFromSpecificLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesUsingAdditionalLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesAndSwitchOneOff", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadYamlFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.localFileTakesPrecedenceOverClasspath", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.locationReplaceDefaultLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.moreSpecificLocationTakesPrecedenceOverRoot", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoOfThreePropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.multiValueSpringProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesWithOverride", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.postProcessorsAreOrderedCorrectly", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesActivatedInSpringApplication", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileCanBeIncludedWithoutAnyBeingActive", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesActivatedInFirst", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.absoluteResourceDefaultsToFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.activateProfileFromProfileSpecificProperties", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultYamlDocumentNotActivated", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.activeProfilesCanBeConfiguredUsingPlaceholdersResolvedAgainstTheEnvironment", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultYamlDocument", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.addBeforeDefaultProperties", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultPropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.additionalLocationTakesPrecedenceOverDefaultLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadCustomResource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.additionalProfilesCanBeIncludedFromAnyPropertySource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.lastAdditionalLocationWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.commandLineWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.includeLoop", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.defaultPropertyAsFallbackDuringFileParsing", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfileAndActive", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.defaultPropertyAsFallback", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfileAndActiveFromFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadProfileEmptySameAsNotSpecified", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationAndNonActiveProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertiesFromCustomPropertySourceLoaderShouldBeUsedWithSpecificResource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationInProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertiesFromCustomPropertySourceLoaderShouldBeUsed", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationMultipleLocations", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileSubDocumentInSameProfileSpecificFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationMultipleLocationsAndName", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileSubDocumentInDifferentProfileSpecificFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationWithName", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentViaActiveAndIncludeProperty", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationWithPlaceholder", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaPropertyDuplicateEnvironmentWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.randomValue", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaPropertyDuplicate", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificNameAndProfileFromExistingSource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaProperty", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilePropertiesUsedInPlaceholders", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceAsFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceDefaultsToFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascading", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascadingMultipleActiveProfilesViaPropertiesShouldPreserveOrder", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationWithActiveProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascadingOverrideProfilesA", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationOverrideLocalActiveProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileCascadingOverrideProfilesB", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationLocalActiveProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationDefaultProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerYamlProfileNegationTests.yamlProfileNegationWithProfileSpecificFile", "org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.emptyInitializers", "org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.orderedInitialize", "org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.genericNotSuitable", "org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.notAnInitializerClass", "org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.noInitializers", "org.springframework.boot.context.config.DelegatingApplicationContextInitializerTests.noSuchInitializerClass", "org.springframework.boot.context.config.DelegatingApplicationListenerTests.emptyInitializers", "org.springframework.boot.context.config.DelegatingApplicationListenerTests.noInitializers", "org.springframework.boot.context.config.DelegatingApplicationListenerTests.orderedInitialize", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningIfScanningProblemPackages", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningInDefaultPackage", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfInRealPackage", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningInDefaultPackageAndMetaAnnotation", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfHasValue", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.logWarningInOrgSpringPackage", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfHasBasePackages", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogIfHasBasePackageClasses", "org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.noLogWithoutComponentScanAnnotation", "org.springframework.boot.context.ContextIdApplicationContextInitializerTests.complexHierarchy", "org.springframework.boot.context.ContextIdApplicationContextInitializerTests.contextWithParentWithNoContextIdFallsBackToDefaultId", "org.springframework.boot.context.ContextIdApplicationContextInitializerTests.linearHierarchy", "org.springframework.boot.context.ContextIdApplicationContextInitializerTests.singleContextWithCustomName", "org.springframework.boot.context.ContextIdApplicationContextInitializerTests.singleContextWithDefaultName", "org.springframework.boot.context.FileEncodingApplicationListenerTests.testIllegalState", "org.springframework.boot.context.FileEncodingApplicationListenerTests.testSunnyDayMandated", "org.springframework.boot.context.FileEncodingApplicationListenerTests.testSunnyDayNothingMandated", "org.springframework.boot.context.logging.LoggingApplicationListenerIntegrationTests.loggingPerformedDuringChildApplicationStartIsNotLost", "org.springframework.boot.context.logging.LoggingApplicationListenerIntegrationTests.loggingSystemRegisteredInTheContext", "org.springframework.boot.context.logging.LoggingApplicationListenerTests.initializationError", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldBindCharArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToCollectionShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldReturnArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenStringShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldReturnPrimitiveArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNotInOrderShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNonSequentialShouldThrowException", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenCommaListAndIndexedShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNonIterableShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenCommaListShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNestedShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenEmptyStringShouldReturnEmptyArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNestedListShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenHasExistingCollectionShouldReplaceAllContents", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenMultipleSourceShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenHasSpacesShouldTrim", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenIndexedAndCommaListShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.BackCompatibilityBinderIntegrationTests.bindWhenBindingCamelCaseToEnvironmentWithExtractUnderscore", "org.springframework.boot.context.properties.bind.BackCompatibilityBinderIntegrationTests.bindWhenUsingSystemEnvironmentToOverride", "org.springframework.boot.context.properties.bind.BeanPropertyNameTests.toDashedCaseShouldConvertValue", "org.springframework.boot.context.properties.bind.BindableTests.equalsAndHashCode", "org.springframework.boot.context.properties.bind.BindableTests.withAnnotationsShouldSetAnnotations", "org.springframework.boot.context.properties.bind.BindableTests.getAnnotationsShouldReturnEmptyArray", "org.springframework.boot.context.properties.bind.BindableTests.toStringShouldShowDetails", "org.springframework.boot.context.properties.bind.BindableTests.getAnnotationWhenMatchShouldReturnAnnotation", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWithExistingValueShouldSetTypeAndExistingValue", "org.springframework.boot.context.properties.bind.BindableTests.getAnnotationWhenNoMatchShouldReturnNull", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenTypeIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenNotBoxedShouldReturnType", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenPrimitiveWithExistingValueWrapperShouldNotThrowException", "org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenPrimitiveArrayShouldReturnBoxedType", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenExistingValueIsNotInstanceOfTypeShouldThrowException", "org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenPrimitiveShouldReturnBoxedType", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeShouldSetType", "org.springframework.boot.context.properties.bind.BindableTests.ofClassShouldSetType", "org.springframework.boot.context.properties.bind.BindableTests.ofInstanceShouldSetTypeAndExistingValue", "org.springframework.boot.context.properties.bind.BindableTests.ofClassWhenTypeIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindableTests.ofClassWithExistingValueShouldSetTypeAndExistingValue", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenConversionServiceCanConvertShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasCustomEditorShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.createWhenPropertyEditorInitializerIsNullShouldCreate", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasDefaultEditorShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.createWhenPropertyEditorInitializerIsNotNullShouldUseToInitialize", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorByConventionShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.createWhenConversionServiceIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorForArrayElementShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenNotPropertyEditorAndConversionServiceCannotConvertShouldThrowException", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorForCollectionElementShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorForCollectionElementShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenNotPropertyEditorAndConversionServiceCannotConvertShouldReturnFalse", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorForArrayElementShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenConversionServiceCanConvertShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorByConventionShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenConvertingToFileShouldExcludeFileEditor", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasDefaultEditorShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasCustomEditorShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.fallsBackToApplicationConversionService", "org.springframework.boot.context.properties.bind.BinderTests.bindExceptionWhenBeanBindingFailsShouldHaveNullConfigurationProperty", "org.springframework.boot.context.properties.bind.BinderTests.bindToBeanWithCycle", "org.springframework.boot.context.properties.bind.BinderTests.bindWithEmptyPrefixShouldIgnorePropertiesWithEmptyName", "org.springframework.boot.context.properties.bind.BinderTests.bindToBeanWithUnresolvableGenerics", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenTargetIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanShouldReturnPopulatedBean", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenNameIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenHasMalformedDateShouldThrowException", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanWhenHasPropertyWithSameNameShouldStillBind", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenHasAnnotationsShouldChangeConvertedValue", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanWhenNonIterableShouldReturnPopulatedBean", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithPlaceholdersShouldResolve", "org.springframework.boot.context.properties.bind.BinderTests.bindToValidatedBeanWithResourceAndNonEnumerablePropertySource", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithMissingPlaceholderShouldResolveToValueWithPlaceholder", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnConvertedPropertyValue", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithCustomPropertyEditorShouldReturnConvertedValue", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnPropertyValue", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWhenPropertyIsMissingShouldReturnUnbound", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnPropertyValueFromSecondSource", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWhenMultipleCandidatesShouldReturnFirst", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.BinderTests.createWhenSourcesIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.getWhenHasNoValueShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.orElseWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.getWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.orElseWhenHasValueNoShouldReturnOther", "org.springframework.boot.context.properties.bind.BindResultTests.hashCodeAndEquals", "org.springframework.boot.context.properties.bind.BindResultTests.orElseThrowWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenConsumerIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.orElseThrowWhenHasNoValueShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenHasNoValueShouldNotCallConsumer", "org.springframework.boot.context.properties.bind.BindResultTests.orElseGetWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenHasValueShouldCallConsumer", "org.springframework.boot.context.properties.bind.BindResultTests.orElseGetWhenHasValueNoShouldReturnOther", "org.springframework.boot.context.properties.bind.BindResultTests.isBoundWhenHasNoValueShouldFalse", "org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenTypeIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.isBoundWhenHasValueShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.mapWhenHasNoValueShouldNotCallMapper", "org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenHasValueNoShouldReturnCreatedValue", "org.springframework.boot.context.properties.bind.BindResultTests.mapWhenHasValueShouldCallMapper", "org.springframework.boot.context.properties.bind.BindResultTests.ofWhenValueIsNullShouldReturnUnbound", "org.springframework.boot.context.properties.bind.BindResultTests.mapWhenMapperIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.ofWhenHasValueShouldReturnBoundResultOfValue", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithClonedArray", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToSetShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithExceptionInGetterForExistingValue", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToSetShouldNotAllowDuplicateValues", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithNestedCollectionAndNonIterableSourceShouldNotFail", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNonScalarCollectionWhenNonSequentialShouldThrowException", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithNestedCollectionShouldPopulateCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNonScalarCollectionShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldAlsoCallSetterIfPresent", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldRespectCollectionType", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToListShouldAllowDuplicateValues", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToImmutableCollectionShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWithNoDefaultConstructor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListAndIndexedShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWithDefaultConstructor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenStringShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListWithPlaceholdersShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenEmptyStringShouldReturnEmptyCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNotInOrderShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNonSequentialShouldThrowException", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNonIterableShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenIndexedAndCommaListShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNestedShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenItemContainsCommasShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenMultipleSourceShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.handler.IgnoreErrorsBindHandlerTests.bindWhenIgnoringErrorsShouldBind", "org.springframework.boot.context.properties.bind.handler.IgnoreErrorsBindHandlerTests.bindWhenNotIgnoringErrorsShouldFail", "org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenExceptionInNestedContextShouldFail", "org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenTopLevelContextAndExceptionIgnorableShouldNotFail", "org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenExceptionNotIgnorableShouldFail", "org.springframework.boot.context.properties.bind.handler.IgnoreTopLevelConverterNotFoundBindHandlerTests.bindWhenHandlerNotPresentShouldFail", "org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenNotUsingNoUnboundElementsHandlerShouldBind", "org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerShouldBind", "org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerShouldBindIfPrefixDifferent", "org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerShouldBindIfUnboundSystemProperties", "org.springframework.boot.context.properties.bind.handler.NoUnboundElementsBindHandlerTests.bindWhenUsingNoUnboundElementsHandlerThrowException", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindHierarchy", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindWithAnnotations", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindNested", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindWhenValueIsConvertedWithPropertyEditorShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToCollection", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToListIfUnboundElementsPresentShouldThrowException", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToCollectionWithDelimiter", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWithNoPropertiesShouldReturnUnbound", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToList", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWithExistingValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToMap", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWhenNoNestedShouldLeaveNestedAsNull", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToSet", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWhenNoDefaultConstructorShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldCreateBoundBean", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceShouldBindToInstance", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldIgnoreInvalidAccessors", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToExistingInstanceShouldLeaveDefaults", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldIgnoreStaticAccessors", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWithSelfReferenceShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldLeaveDefaults", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertyCannotBeConvertedShouldThrowException", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldNotInvokeExtraMethods", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertyCannotBeConvertedAndIgnoreErrorsShouldNotSetValue", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoPrefixShouldCreateBoundBean", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertiesMissingShouldReturnUnbound", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterAndImmutableShouldThrowException", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenNotIterableShouldNotBindNestedBasedOnInstance", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindNested", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenNoDefaultConstructorShouldReturnUnbound", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToCollection", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenMismatchedGetSetShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToList", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenIterableShouldBindNestedBasedOnInstance", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToMap", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToSet", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNumberKeyAndCommaSeparated", "org.springframework.boot.context.properties.bind.MapBinderTests.nestedMapsShouldNotBindToNull", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNumberKeyAndIndexed", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToPropertiesShouldBeEquivalentToMapOfStringString", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPlaceholdersShouldBeGreedyForScalars", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPropertyEditorForValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPropertyEditorForKey", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayWithDotKeysAndCommaSeparatedShouldPreserveDot", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayWithDotKeysShouldPreserveDot", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldReturnPopulatedMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringCollectionWithDotKeysShouldPreserveDot", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldRespectMapType", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenEmptyRootNameShouldBindMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldNotTreatClassWithStringConstructorAsScalar", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldConvertMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindingWithSquareBracketMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToBeanWithExceptionInGetterForExistingValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBindToMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToImmutableMapShouldReturnPopulatedMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBindNestedMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToListOfMaps", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBeGreedyForStrings", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapNonScalarCollectionShouldPopulateMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBeGreedyForScalars", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapNonScalarCollectionWithDotKeysShouldBind", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldConvertKey", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoConverterForValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithCustomConverter", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMultipleInSameSourceCandidateShouldBindFirst", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithCustomConverterAndChildElements", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMultipleCandidateShouldBindFirst", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithDefaultConstructor", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMapValueIsObjectShouldBindNestedMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithEmptyPrefix", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMapValueIsObjectAndNoRootShouldBindNestedMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenHasExistingMapShouldReplaceOnlyNewContents", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoDefaultConstructor", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoPropertiesShouldReturnUnbound", "org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.placeholderResolverIfEnvironmentNullShouldThrowException", "org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfHelperPresentShouldUseIt", "org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfPlaceholderAbsentAndNoDefaultUsesPlaceholder", "org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfPlaceholderAbsentUsesDefault", "org.springframework.boot.context.properties.bind.PropertySourcesPlaceholdersResolverTests.resolveIfPlaceholderPresentResolvesProperty", "org.springframework.boot.context.properties.bind.test.PackagePrivateBeanBindingTests.bindToPackagePrivateClassShouldBindToInstance", "org.springframework.boot.context.properties.bind.validation.BindValidationExceptionTests.createWhenValidationErrorsIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.validation.BindValidationExceptionTests.getValidationErrorsShouldReturnValidationErrors", "org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.ofShouldReturnOriginCapableFieldError", "org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.toStringShouldAddOrigin", "org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.ofWhenFieldErrorIsNullShouldReturnNull", "org.springframework.boot.context.properties.bind.validation.OriginTrackedFieldErrorTests.ofWhenOriginIsNullShouldReturnFieldErrorWithoutOrigin", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldBindWithoutHandler", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailIfExistingValueIsInvalid", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldValidateNestedProperties", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithAccessToBoundProperties", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldNotValidateDepthGreaterThanZero", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithAccessToName", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithHandler", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldFailWithAccessToOrigin", "org.springframework.boot.context.properties.bind.validation.ValidationBindHandlerTests.bindShouldValidateWithoutAnnotation", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.createWhenBoundPropertiesIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.iteratorShouldIterateErrors", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.createWhenErrorsIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getNameShouldReturnName", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.createWhenNameIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getErrorsShouldReturnErrors", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getBoundPropertiesShouldReturnBoundProperties", "org.springframework.boot.context.properties.bind.validation.ValidationErrorsTests.getErrorsShouldAdaptFieldErrorsToBeOriginProviders", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.customProtocolResolver", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWithPropertyPlaceholderValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.customProtocolResolverIsInvoked", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWithPropertyPlaceholderShouldNotAlterPropertySourceOrder", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBindToMap", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindNested", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBindNested", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToBeanWithGenerics", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToCharArray", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsShouldBindToEnumSet", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToJavaTimeDuration", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsShouldBindToEnum", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToMap", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsAndOverrideShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToMapWithNumericKey", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenTopLevelConverterNotFoundExceptionShouldNotFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldNotInitializeFactoryBeans", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenSetterThrowsValidationExceptionShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldSupportRebindableConfigurationProperties", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPropertiesHaveAnnotationOnBaseClassShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldUseConfigurationConverter", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesDeclaredAsBeanShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldUseGenericConfigurationConverter", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesDeclaredAsAnnotationValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadValidatedOnBeanMethodAndJsr303ConstraintDoesNotMatchShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesAreReplacedOnBeanMethodShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingArrayFromYamlArrayShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenOverridingPropertiesWithPlaceholderResolutionInEnvironmentShouldBindWithOverride", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingArrayShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenOverridingPropertiesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingCurrentDirectoryToFileShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenMultiplePrefixedPropertiesDeclaredAsAnnotationValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingOnlyParentContextShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintMatchesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingOver256ElementsShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToDataSizeShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToListOfGenericClassShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedButIsValidShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToMapKeyWithPeriodShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchAndNotValidatedAnnotationShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToValidatedImplementationOfInterfaceShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasUnsupportedConfigurationPropertiesValidatorShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingTwoBeansShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasUnboundElementsFromSystemEnvironmentShouldNotThrowException", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithDefaultsInJavaConfigurationShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPropertySourcesPlaceholderConfigurerShouldSupportRebindableConfigurationProperties", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithDefaultsInXmlShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPrefixShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithoutAndAnnotationShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPostConstructShouldTriggerPostConstructWithBoundBean", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithoutAnnotationValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasMultiplePropertySourcesPlaceholderConfigurerShouldLogWarning", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithParentContextShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreUnknownFieldsFalseAndUnknownFieldsShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationConverterIsNotQualifiedShouldNotConvert", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreUnknownFieldsFalseAndNoUnknownFieldsShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationPropertiesContainsMapWithPositiveAndNegativeIntegerKeys", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreInvalidFieldsTrueAndInvalidFieldsShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationPropertiesIsAlsoValidatorShouldApplyValidator", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasCustomPropertyEditorShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenDotsInSystemEnvironmentPropertiesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasConfigurationPropertiesValidatorShouldApplyValidator", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenFailsShouldIncludeAnnotationDetails", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenGenericConfigurationConverterIsNotQualifiedShouldNotConvert", "org.springframework.boot.context.properties.PropertyMapperTests.alwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource", "org.springframework.boot.context.properties.PropertyMapperTests.asIntShouldAdaptSupplier", "org.springframework.boot.context.properties.PropertyMapperTests.whenWhenValueDoesNotMatchShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.asShouldAdaptSupplier", "org.springframework.boot.context.properties.PropertyMapperTests.whenWhenCombinedWithAsUsesSourceValue", "org.springframework.boot.context.properties.PropertyMapperTests.asWhenAdapterIsNullShouldThrowException", "org.springframework.boot.context.properties.PropertyMapperTests.whenTrueWhenValueIsTrueShouldMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromNullValue", "org.springframework.boot.context.properties.PropertyMapperTests.whenTrueWhenValueIsFalseShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromValue", "org.springframework.boot.context.properties.PropertyMapperTests.whenNonNullWhenSuppliedThrowsNullPointerExceptionShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromValueAlwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource", "org.springframework.boot.context.properties.PropertyMapperTests.whenNonNullWhenSuppliedNullShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromValueAsIntShouldAdaptValue", "org.springframework.boot.context.properties.PropertyMapperTests.whenInstanceOfWhenValueIsTargetTypeShouldMatch", "org.springframework.boot.context.properties.PropertyMapperTests.fromWhenSupplierIsNullShouldThrowException", "org.springframework.boot.context.properties.PropertyMapperTests.whenInstanceOfWhenValueIsNotTargetTypeShouldNotMatch", "org.springframework.boot.context.properties.PropertyMapperTests.toShouldMapFromSupplier", "org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueIsNullShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.toWhenConsumerIsNullShouldThrowException", "org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueIsEmptyShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenEqualToWhenValueIsEqualShouldMatch", "org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueHasTextShouldMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenEqualToWhenValueIsNotEqualShouldNotMatch", "org.springframework.boot.context.properties.PropertyMapperTests.whenFalseWhenValueIsTrueShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenFalseWhenValueIsFalseShouldMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenWhenValueMatchesShouldMap", "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenAllAreAbsentShouldReturnAbsent", "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.getConfigurationPropertyWhenNotAliasesShouldReturnValue", "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenAnyIsPresentShouldReturnPresent", "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.getConfigurationPropertyShouldConsiderAliases", "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsPresentShouldReturnPresent", "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsUnknownShouldReturnUnknown", "org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenAllAreAbsentShouldReturnAbsent", "org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenAnyIsPresentShouldReturnPresent", "org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.getConfigurationPropertyWhenNotAliasesShouldReturnValue", "org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsPresentShouldReturnPresent", "org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.getConfigurationPropertyShouldConsiderAliases", "org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.containsDescendantOfWhenSourceReturnsUnknownShouldReturnUnknown", "org.springframework.boot.context.properties.source.AliasedIterableConfigurationPropertySourceTests.streamShouldIncludeAliases", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.addAliasesFromNameShouldAddMapping", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getNameForAliasWhenNotMappedShouldReturnNull", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.addAliasesFromStringShouldAddMapping", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getNameForAliasWhenHasMappingShouldReturnName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.addWhenHasExistingShouldAddAdditionalMappings", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getAliasesWhenNotMappedShouldReturnEmptyList", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.createWithNameShouldAddMapping", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.getAliasesWhenMappedShouldReturnMapping", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.createWithStringShouldAddMapping", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliasesTests.createWithStringWhenNullNameShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithWhitespaceInName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenGrandparentShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isEmptyWhenEmptyShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenParentShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenSameShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenRootShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenNotIndexedShouldAppendWithDot", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenEqualToSizeShouldReturnExisting", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenIndexedShouldAppendWithBrackets", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenGreaterThanSizeShouldReturnExisting", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameMultiDotShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenLessThenSizeShouldReturnChopped", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameIsNullShouldReturnName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameIsNotValidShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldCreateName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldStripInvalidChars", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptWhenElementValueProcessorIsNullShouldAdapt", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportIndexedElements", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptUnderscoreShouldReturnEmpty", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportMixedCase", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldUseElementValueProcessor", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportUnderscore", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptWhenNameIsNullShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getLastElementShouldGetLastElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInOriginalFormShouldReturnElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInUniformFormShouldNotIncludeDashes", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.equalsWhenStartsWith", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInUniformFormShouldReturnElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.equalsAndHashCode", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementShouldNotIncludeAngleBrackets", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.compareShouldSortNames", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.compareDifferentLengthsShouldSortNames", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getLastElementWhenEmptyShouldReturnEmptyString", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getNumberOfElementsShouldReturnNumberOfElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithWhitespaceInAssociativeElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithUppercaseInAssociativeElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDoubleDotAndAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDoubleRunOnAndAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenSimple", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMissingCloseBracket", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenRunOnAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMissingOpenBracket", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenNestedBrackets", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMultipleMismatchedBrackets", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenStartsWithNumber", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isValidWhenValidShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenParentShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenRootReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenGrandparentShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenSameShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isLastElementIndexedWhenNotIndexedShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isValidWhenNotValidShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isLastElementIndexedWhenIndexedShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isEmptyWhenNotEmptyShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotBeNull", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotContainInvalidChars", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDotOnAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotContainUppercase", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDotAndAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotEndWithDot", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotStartWithDot", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotStartWithDash", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.toStringFromOfShouldBeLowerCaseDashed", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.toStringShouldBeLowerCaseDashed", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofWhenNameIsEmptyShouldReturnEmptyName", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getNameShouldReturnName", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getSourceShouldReturnSource", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyOriginShouldReturnOrigin", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyWhenNoneShouldReturnFirst", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyOriginWhenMissingShouldReturnNull", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyWhenNameIsNotValidShouldReturnNull", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyShouldReturnValue", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySourceTests.getPropertyWhenMultipleShouldReturnFirst", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.attachShouldAddAdapterAtBeginning", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.attachShouldReAttachInMergedSetup", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.getWhenAttachedShouldReturnAttached", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.environmentPropertyExpansionShouldWorkWhenAttached", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.fromPropertySourceShouldReturnSpringConfigurationPropertySource", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.fromPropertySourceShouldFlattenPropertySources", "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesTests.getWhenNotAttachedShouldReturnAdapted", "org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenContainsItemShouldReturnPresent", "org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenPredicateIsNullShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenContainsNoItemShouldReturnAbsent", "org.springframework.boot.context.properties.source.ConfigurationPropertyStateTests.searchWhenIterableIsNullShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyTests.createWhenNameIsNullShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyTests.createWhenValueIsNullShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyTests.getValueShouldReturnValue", "org.springframework.boot.context.properties.source.ConfigurationPropertyTests.equalsAndHashCode", "org.springframework.boot.context.properties.source.ConfigurationPropertyTests.getPropertyOriginShouldReturnValuePropertyOrigin", "org.springframework.boot.context.properties.source.ConfigurationPropertyTests.getNameShouldReturnName", "org.springframework.boot.context.properties.source.ConfigurationPropertyTests.toStringShouldReturnValue", "org.springframework.boot.context.properties.source.DefaultPropertyMapperTests.mapFromConfigurationShouldReturnBestGuess", "org.springframework.boot.context.properties.source.DefaultPropertyMapperTests.mapFromStringShouldReturnBestGuess", "org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsEmptyShouldReturnEmpty", "org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.getValueShouldFilterNames", "org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse", "org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.createWhenSourceIsNullShouldThrowException", "org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty", "org.springframework.boot.context.properties.source.FilteredConfigurationPropertiesSourceTests.createWhenFilterIsNullShouldThrowException", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfShouldUseContents", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.iteratorShouldFilterNames", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsEmptyShouldReturnEmpty", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.getValueShouldFilterNames", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsFalseShouldReturnFalse", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.createWhenSourceIsNullShouldThrowException", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.containsDescendantOfWhenSourceReturnsTrueShouldReturnEmpty", "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSourceTests.createWhenFilterIsNullShouldThrowException", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.createWhenMapHasEntriesShouldAdaptMap", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.streamShouldGetFromMemory", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.createWhenMapIsNullShouldThrowException", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.putShouldPutEntry", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.getConfigurationPropertyShouldGetFromMemory", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.putAllWhenMapIsNullShouldThrowException", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.iteratorShouldGetFromMemory", "org.springframework.boot.context.properties.source.MapConfigurationPropertySourceTests.putAllShouldPutEntries", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.createWhenPropertySourcesIsNullShouldThrowException", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldTrackWhenSourceHasIdenticalName", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptMultiplePropertySources", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldTrackChanges", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptPropertySource", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldNotAdaptSystemEnvironmentPropertyOverrideSource", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptSystemEnvironmentPropertySource", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldFlattenEnvironment", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldAdaptSystemEnvironmentPropertySourceWithUnderscoreValue", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourcesTests.shouldExtendedAdaptSystemEnvironmentPropertySource", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.containsDescendantOfShouldReturnEmpty", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getWhenEnumerableShouldBeIterable", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.createWhenMapperIsNullShouldThrowException", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getValueWhenOriginCapableShouldIncludeSourceOrigin", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.createWhenPropertySourceIsNullShouldThrowException", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getValueShouldUseDirectMapping", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.fromWhenEnumerableButRestrictedShouldReturnNonIterable", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.getValueOrigin", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.fromWhenNonEnumerableShouldReturnNonIterable", "org.springframework.boot.context.properties.source.SpringConfigurationPropertySourceTests.fromWhenPropertySourceIsNullShouldThrowException", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.containsDescendantOfShouldCheckSourceNames", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.createWhenMapperIsNullShouldThrowException", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.iteratorShouldAdaptNames", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.createWhenPropertySourceIsNullShouldThrowException", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueWhenOriginCapableShouldIncludeSourceOrigin", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueOrigin", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueShouldUseEnumerableMapping", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.getValueShouldUseDirectMapping", "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySourceTests.propertySourceKeyDataChangeInvalidatesCache", "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.mapFromConfigurationShouldReturnBestGuess", "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.underscoreWithWhitespaceShouldNotMapToEmptyString", "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.mapFromStringShouldReturnBestGuess", "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapperTests.underscoreShouldNotMapToEmptyString", "org.springframework.boot.context.properties.source.UnboundElementsSourceFilterTests.filterWhenSourceIsNotSystemShouldReturnTrue", "org.springframework.boot.context.properties.source.UnboundElementsSourceFilterTests.filterWhenSourceIsSystemEnvironmentPropertySourceShouldReturnFalse", "org.springframework.boot.context.properties.source.UnboundElementsSourceFilterTests.filterWhenSourceIsSystemPropertiesPropertySourceShouldReturnFalse", "org.springframework.boot.context.TypeExcludeFilterTests.loadsTypeExcludeFilters", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenBadFormatShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.printSimpleWithUnitShouldPrintInUnit", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenIso8601ShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.printSimpleWithoutUnitShouldPrintInMs", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleDaysShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.printIso8601ShouldPrint", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleHoursShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.printIso8601ShouldIgnoreUnit", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMicrosShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleWithUnitShouldUseUnitAsFallback", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMillisShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleWhenUnknownUnitShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMinutesShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleWhenIso8601ShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleNanosShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleShouldParse", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleSecondsShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseIso8601WithUnitShouldIgnoreUnit", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleWithoutSuffixButWithChronoUnitShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseIso8601WhenSimpleShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleWithoutSuffixShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseIso8601ShouldParse", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenValueIsNullShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectWhenUnknownShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectWhenIso8601ShouldReturnIso8601", "org.springframework.boot.convert.DurationStyleTests.detectWhenSimpleShouldReturnSimple", "org.springframework.boot.DefaultApplicationArgumentsTests.argumentsMustNotBeNull", "org.springframework.boot.DefaultApplicationArgumentsTests.containsOption", "org.springframework.boot.DefaultApplicationArgumentsTests.getOptionValues", "org.springframework.boot.DefaultApplicationArgumentsTests.getArgs", "org.springframework.boot.DefaultApplicationArgumentsTests.getNonOptionArgs", "org.springframework.boot.DefaultApplicationArgumentsTests.getNoNonOptionArgs", "org.springframework.boot.DefaultApplicationArgumentsTests.optionNames", "org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cycleReferencedViaOtherBeans", "org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cyclicBeanMethods", "org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cycleWithAnUnknownStartIsNotAnalyzed", "org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzerTests.cycleWithAutowiredFields", "org.springframework.boot.diagnostics.analyzer.BeanDefinitionOverrideFailureAnalyzerTests.analyzeBeanDefinitionOverrideException", "org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzerTests.jdkProxyCausesInjectionFailure", "org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.analysisForUnboundElementsIsNull", "org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.analysisForValidationExceptionIsNull", "org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.bindExceptionDueToOtherFailure", "org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.bindExceptionForUnknownValueInEnumListsValidValuesInAction", "org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzerTests.bindExceptionWithNestedFailureShouldDisplayNestedMessage", "org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.bindExceptionWithFieldErrorsDueToValidationFailure", "org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.otherBindExceptionShouldReturnAnalysis", "org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.bindExceptionWithObjectErrorsDueToValidationFailure", "org.springframework.boot.diagnostics.analyzer.BindValidationFailureAnalyzerTests.bindExceptionWithOriginDueToValidationFailure", "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyNameFailureAnalyzerTests.analysisWhenRootCauseIsBeanCreationFailureShouldContainBeanName", "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithKnownProperty", "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithKnownPropertyAndNoReason", "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithKnownPropertyAndOtherCandidates", "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithNullEnvironment", "org.springframework.boot.diagnostics.analyzer.InvalidConfigurationPropertyValueFailureAnalyzerTests.analysisWithUnknownKey", "org.springframework.boot.diagnostics.analyzer.NoSuchMethodFailureAnalyzerTests.initializationError", "org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForConstructorConsumer", "org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForXmlConsumer", "org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForFieldConsumer", "org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForObjectProviderMethodConsumer", "org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForMethodConsumer", "org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzerTests.failureAnalysisForObjectProviderConstructorConsumer", "org.springframework.boot.diagnostics.analyzer.UnboundConfigurationPropertyFailureAnalyzerTests.bindExceptionDueToUnboundElements", "org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzerTests.initializationError", "org.springframework.boot.diagnostics.FailureAnalyzersIntegrationTests.analysisIsPerformed", "org.springframework.boot.diagnostics.FailureAnalyzersTests.analyzersAreLoadedAndCalled", "org.springframework.boot.diagnostics.FailureAnalyzersTests.analyzerThatFailsDuringAnalysisDoesNotPreventOtherAnalyzersFromBeingCalled", "org.springframework.boot.diagnostics.FailureAnalyzersTests.analyzerThatFailsDuringInitializationDoesNotPreventOtherAnalyzersFromBeingCalled", "org.springframework.boot.diagnostics.FailureAnalyzersTests.beanFactoryIsInjectedIntoBeanFactoryAwareFailureAnalyzers", "org.springframework.boot.diagnostics.FailureAnalyzersTests.environmentIsInjectedIntoEnvironmentAwareFailureAnalyzers", "org.springframework.boot.EnvironmentConverterTests.convertedEnvironmentHasSameActiveProfiles", "org.springframework.boot.EnvironmentConverterTests.convertedEnvironmentHasSameConversionService", "org.springframework.boot.EnvironmentConverterTests.servletPropertySourcesArePresentWhenTypeToConvertIsWeb", "org.springframework.boot.EnvironmentConverterTests.envClassSameShouldReturnEnvironmentUnconverted", "org.springframework.boot.EnvironmentConverterTests.servletPropertySourcesAreNotCopiedOverIfNotWebEnvironment", "org.springframework.boot.EnvironmentConverterTests.envClassSameShouldReturnEnvironmentUnconvertedEvenForWeb", "org.springframework.boot.EnvironmentConverterTests.standardServletEnvironmentIsConverted", "org.springframework.boot.env.NoSnakeYamlPropertySourceLoaderTests.initializationError", "org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyOriginWhenMissingShouldReturnNull", "org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyWhenTrackedShouldReturnValue", "org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyOriginWhenNonTrackedShouldReturnNull", "org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyWhenNonTrackedShouldReturnValue", "org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyOriginWhenTrackedShouldReturnOrigin", "org.springframework.boot.env.OriginTrackedMapPropertySourceTests.getPropertyWhenMissingShouldReturnNull", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.compareToJavaProperties", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getCommentedOutPropertyShouldBeNull", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getSimplePropertyWithColonSeparator", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getEscapedProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getSimpleProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getImmediateMultiline", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithWhitespaceAfterKey", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getListProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithWhiteSpace", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getMalformedUnicodeProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithValueComment", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getMultiline", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithTrailingSpace", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBackslashEscaped", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithTab", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBackslashEscapedInValue", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSpaceSeparator", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBang", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSeparatorSurroundedBySpaces", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithCarriageReturn", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSeparatorInValue", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithEmptyValue", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithNewLine", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithFormFeed", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithMultilineImmediateBang", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithISO88591Character", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getUnicodeProperty", "org.springframework.boot.env.OriginTrackedYamlLoaderTests.processCollection", "org.springframework.boot.env.OriginTrackedYamlLoaderTests.processSimpleKey", "org.springframework.boot.env.OriginTrackedYamlLoaderTests.processEmptyAndNullValues", "org.springframework.boot.env.OriginTrackedYamlLoaderTests.processMultiline", "org.springframework.boot.env.OriginTrackedYamlLoaderTests.processListOfMaps", "org.springframework.boot.env.OriginTrackedYamlLoaderTests.processMap", "org.springframework.boot.env.PropertiesPropertySourceLoaderTests.getFileExtensions", "org.springframework.boot.env.PropertiesPropertySourceLoaderTests.loadProperties", "org.springframework.boot.env.PropertiesPropertySourceLoaderTests.loadXml", "org.springframework.boot.env.RandomValuePropertySourceTests.intMax", "org.springframework.boot.env.RandomValuePropertySourceTests.uuidValue", "org.springframework.boot.env.RandomValuePropertySourceTests.intRange", "org.springframework.boot.env.RandomValuePropertySourceTests.string", "org.springframework.boot.env.RandomValuePropertySourceTests.intValue", "org.springframework.boot.env.RandomValuePropertySourceTests.notRandom", "org.springframework.boot.env.RandomValuePropertySourceTests.longMax", "org.springframework.boot.env.RandomValuePropertySourceTests.longValue", "org.springframework.boot.env.RandomValuePropertySourceTests.longOverflow", "org.springframework.boot.env.RandomValuePropertySourceTests.longRange", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.empty", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.propertySourceShouldTrackOrigin", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.envVar", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.prefixed", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.error", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.periodSeparated", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.list", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.nested", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.listOfObject", "org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessorTests.missing", "org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.postProcessShouldReplaceSystemEnvironmentPropertySource", "org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.replacedPropertySourceWhenPropertyAbsentShouldReturnNullOrigin", "org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.replacedPropertySourceShouldBeOriginAware", "org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessorTests.replacedPropertySourceShouldResolveProperty", "org.springframework.boot.env.YamlPropertySourceLoaderTests.load", "org.springframework.boot.env.YamlPropertySourceLoaderTests.loadOriginAware", "org.springframework.boot.env.YamlPropertySourceLoaderTests.mergeItems", "org.springframework.boot.env.YamlPropertySourceLoaderTests.orderedItems", "org.springframework.boot.env.YamlPropertySourceLoaderTests.timestampLikeItemsDoNotBecomeDates", "org.springframework.boot.ExitCodeGeneratorsTests.addAllWhenGeneratorsIsNullShouldThrowException", "org.springframework.boot.ExitCodeGeneratorsTests.addWhenGeneratorIsNullShouldThrowException", "org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenNoGeneratorsShouldReturnZero", "org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenAllNegativeShouldReturnLowestValue", "org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenGeneratorThrowsShouldReturnOne", "org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenAllPositiveShouldReturnHighestValue", "org.springframework.boot.ExitCodeGeneratorsTests.getExitCodeWhenUsingExitCodeExceptionMapperShouldCallMapper", "org.springframework.boot.ImageBannerTests.printBannerShouldCalculateHeight", "org.springframework.boot.ImageBannerTests.printBannerWhenShouldPrintAllColors", "org.springframework.boot.ImageBannerTests.printBannerShouldCapWidthAndCalculateHeight", "org.springframework.boot.ImageBannerTests.printBannerWhenInvertedShouldResetForegroundAndBackground", "org.springframework.boot.ImageBannerTests.printBannerShouldPrintBlackAsBlackLowLuminance", "org.springframework.boot.ImageBannerTests.printBannerWhenInvertedShouldPrintWhiteAsBrightWhiteLowLuminance", "org.springframework.boot.ImageBannerTests.printBannerShouldPrintMargin", "org.springframework.boot.ImageBannerTests.printBannerWhenInvertedShouldPrintBlackAsBlackHighLuminance", "org.springframework.boot.ImageBannerTests.printBannerShouldPrintWhiteAsBrightWhiteHighLuminance", "org.springframework.boot.ImageBannerTests.printBannerWhenHasMarginPropertyShouldPrintSizedMargin", "org.springframework.boot.ImageBannerTests.printBannerShouldRenderGradient", "org.springframework.boot.ImageBannerTests.printBannerWhenHasHeightPropertyShouldSetHeight", "org.springframework.boot.ImageBannerTests.printBannerShouldResetForegroundAndBackground", "org.springframework.boot.ImageBannerTests.printBannerWhenAnimatesShouldPrintAllFrames", "org.springframework.boot.info.BuildPropertiesTests.basicInfo", "org.springframework.boot.info.BuildPropertiesTests.noInfo", "org.springframework.boot.info.GitPropertiesTests.basicInfo", "org.springframework.boot.info.GitPropertiesTests.shortenCommitIdShorterThan7", "org.springframework.boot.info.GitPropertiesTests.coerceDateString", "org.springframework.boot.info.GitPropertiesTests.shortenCommitIdLongerThan7", "org.springframework.boot.info.GitPropertiesTests.coerceEpochSecond", "org.springframework.boot.info.GitPropertiesTests.shortCommitUsedIfPresent", "org.springframework.boot.info.GitPropertiesTests.coerceUnsupportedFormat", "org.springframework.boot.info.GitPropertiesTests.noInfo", "org.springframework.boot.info.InfoPropertiesTests.inputIsImmutable", "org.springframework.boot.info.InfoPropertiesTests.toPropertySources", "org.springframework.boot.info.InfoPropertiesTests.iterator", "org.springframework.boot.info.InfoPropertiesTests.removeNotSupported", "org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldAllowInnerAbstractClasses", "org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldRegisterSerializers", "org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldRegisterDeserializers", "org.springframework.boot.jackson.JsonComponentModuleTests.moduleShouldRegisterInnerClasses", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsShortShouldReturnShort", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsStringShouldReturnString", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsNullShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsUnknownShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsLongShouldReturnLong", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenValueIsNullShouldReturnNull", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsIntegerShouldReturnInteger", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsFloatShouldReturnFloat", "org.springframework.boot.jackson.JsonObjectDeserializerTests.deserializeObjectShouldReadJson", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsFoundShouldReturnNode", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBooleanShouldReturnBoolean", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsNullNodeShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBigIntegerShouldReturnBigInteger", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsNullShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBigDecimalShouldReturnBigDecimal", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenTreeIsNullShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsDoubleShouldReturnDouble", "org.springframework.boot.jackson.JsonObjectSerializerTests.serializeObjectShouldWriteJson", "org.springframework.boot.jdbc.DatabaseDriverTests.classNameForKnownDatabase", "org.springframework.boot.jdbc.DatabaseDriverTests.databaseJdbcUrlLookups", "org.springframework.boot.jdbc.DatabaseDriverTests.unknownOnNullJdbcUrl", "org.springframework.boot.jdbc.DatabaseDriverTests.databaseProductNameLookups", "org.springframework.boot.jdbc.DatabaseDriverTests.nullClassNameForUnknownDatabase", "org.springframework.boot.jdbc.DatabaseDriverTests.failureOnMalformedJdbcUrl", "org.springframework.boot.jdbc.DatabaseDriverTests.unknownOnNullProductName", "org.springframework.boot.jdbc.DataSourceBuilderTests.defaultToCommonsDbcp2AsLastResort", "org.springframework.boot.jdbc.DataSourceBuilderTests.specificTypeOfDataSource", "org.springframework.boot.jdbc.DataSourceBuilderTests.defaultToHikari", "org.springframework.boot.jdbc.DataSourceBuilderTests.defaultToTomcatIfHikariIsNotAvailable", "org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.derbyCustomDatabaseName", "org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.getUrlWithEmptyDatabaseName", "org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.getUrlWithNullDatabaseName", "org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.h2CustomDatabaseName", "org.springframework.boot.jdbc.EmbeddedDatabaseConnectionTests.hsqlCustomDatabaseName", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getDefaultAutoCommit", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getValidationQuery", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getMaxPoolSize", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolUsageWithUnlimitedPool", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getMinPoolSize", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolUsageWithNoMax", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolSizeNoConnection", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolUsageWithNoCurrent", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolSizeOneConnection", "org.springframework.boot.jdbc.metadata.CommonsDbcp2DataSourcePoolMetadataTests.getPoolSizeTwoConnections", "org.springframework.boot.jdbc.metadata.CompositeDataSourcePoolMetadataProviderTests.createWithProviders", "org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getDefaultAutoCommit", "org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getMaxPoolSize", "org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getPoolSizeTwoConnections", "org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getMinPoolSize", "org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getPoolSizeOneConnection", "org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getPoolSizeNoConnection", "org.springframework.boot.jdbc.metadata.HikariDataSourcePoolMetadataTests.getValidationQuery", "org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getDefaultAutoCommit", "org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getMaxPoolSize", "org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getPoolSizeTwoConnections", "org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getMinPoolSize", "org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getPoolSizeOneConnection", "org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getPoolSizeNoConnection", "org.springframework.boot.jdbc.metadata.TomcatDataSourcePoolMetadataTests.getValidationQuery", "org.springframework.boot.json.BasicJsonParserTests.doubleValue", "org.springframework.boot.json.BasicJsonParserTests.stringContainingNumber", "org.springframework.boot.json.BasicJsonParserTests.emptyList", "org.springframework.boot.json.BasicJsonParserTests.stringContainingComma", "org.springframework.boot.json.BasicJsonParserTests.emptyMap", "org.springframework.boot.json.BasicJsonParserTests.simpleMap", "org.springframework.boot.json.BasicJsonParserTests.escapeQuote", "org.springframework.boot.json.BasicJsonParserTests.simpleList", "org.springframework.boot.json.BasicJsonParserTests.listOfMaps", "org.springframework.boot.json.BasicJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.BasicJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.BasicJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.mapOfLists", "org.springframework.boot.json.GsonJsonParserTests.doubleValue", "org.springframework.boot.json.GsonJsonParserTests.stringContainingNumber", "org.springframework.boot.json.GsonJsonParserTests.emptyList", "org.springframework.boot.json.GsonJsonParserTests.stringContainingComma", "org.springframework.boot.json.GsonJsonParserTests.emptyMap", "org.springframework.boot.json.GsonJsonParserTests.simpleMap", "org.springframework.boot.json.GsonJsonParserTests.escapeQuote", "org.springframework.boot.json.GsonJsonParserTests.simpleList", "org.springframework.boot.json.GsonJsonParserTests.listOfMaps", "org.springframework.boot.json.GsonJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.GsonJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.GsonJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.mapOfLists", "org.springframework.boot.json.JacksonJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.simpleList", "org.springframework.boot.json.JacksonJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.simpleMap", "org.springframework.boot.json.JacksonJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.stringContainingComma", "org.springframework.boot.json.JacksonJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.JacksonJsonParserTests.stringContainingNumber", "org.springframework.boot.json.JacksonJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.mapOfLists", "org.springframework.boot.json.JacksonJsonParserTests.doubleValue", "org.springframework.boot.json.JacksonJsonParserTests.emptyList", "org.springframework.boot.json.JacksonJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.emptyMap", "org.springframework.boot.json.JacksonJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.escapeQuote", "org.springframework.boot.json.JacksonJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.JacksonJsonParserTests.instanceWithSpecificObjectMapper", "org.springframework.boot.json.JacksonJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.listOfMaps", "org.springframework.boot.json.JacksonJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.doubleValue", "org.springframework.boot.json.YamlJsonParserTests.stringContainingNumber", "org.springframework.boot.json.YamlJsonParserTests.emptyList", "org.springframework.boot.json.YamlJsonParserTests.stringContainingComma", "org.springframework.boot.json.YamlJsonParserTests.emptyMap", "org.springframework.boot.json.YamlJsonParserTests.simpleMap", "org.springframework.boot.json.YamlJsonParserTests.escapeQuote", "org.springframework.boot.json.YamlJsonParserTests.simpleList", "org.springframework.boot.json.YamlJsonParserTests.listOfMaps", "org.springframework.boot.json.YamlJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.YamlJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.YamlJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapOfLists", "org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBeanTests.beanMethods", "org.springframework.boot.jta.atomikos.AtomikosDataSourceBeanTests.beanMethods", "org.springframework.boot.jta.atomikos.AtomikosDependsOnBeanFactoryPostProcessorTests.setsDependsOn", "org.springframework.boot.jta.atomikos.AtomikosPropertiesTests.testDefaultProperties", "org.springframework.boot.jta.atomikos.AtomikosPropertiesTests.testProperties", "org.springframework.boot.jta.atomikos.AtomikosXAConnectionFactoryWrapperTests.wrap", "org.springframework.boot.jta.atomikos.AtomikosXADataSourceWrapperTests.wrap", "org.springframework.boot.jta.bitronix.BitronixDependentBeanFactoryPostProcessorTests.setsDependsOn", "org.springframework.boot.jta.bitronix.BitronixXAConnectionFactoryWrapperTests.wrap", "org.springframework.boot.jta.bitronix.BitronixXADataSourceWrapperTests.wrap", "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.doesNotSetUniqueNameIfNotNull", "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.setsUniqueNameIfNull", "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.sensibleDefaults", "org.springframework.boot.jta.bitronix.PoolingConnectionFactoryBeanTests.setConnectionFactory", "org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.doesNotSetUniqueNameIfNotNull", "org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.setsUniqueNameIfNull", "org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.sensibleDefaults", "org.springframework.boot.jta.bitronix.PoolingDataSourceBeanTests.setDataSource", "org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListenerTests.replaceServiceLocatorBacksOffIfNotPresent", "org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListenerTests.replacesServiceLocator", "org.springframework.boot.liquibase.SpringPackageScanClassResolverTests.testScan", "org.springframework.boot.logging.DeferredLogTests.clearsOnReplayTo", "org.springframework.boot.logging.DeferredLogTests.warnWithThrowable", "org.springframework.boot.logging.DeferredLogTests.debug", "org.springframework.boot.logging.DeferredLogTests.warn", "org.springframework.boot.logging.DeferredLogTests.debugWithThrowable", "org.springframework.boot.logging.DeferredLogTests.traceWithThrowable", "org.springframework.boot.logging.DeferredLogTests.error", "org.springframework.boot.logging.DeferredLogTests.trace", "org.springframework.boot.logging.DeferredLogTests.errorWithThrowable", "org.springframework.boot.logging.DeferredLogTests.switchTo", "org.springframework.boot.logging.DeferredLogTests.fatal", "org.springframework.boot.logging.DeferredLogTests.isWarnEnabled", "org.springframework.boot.logging.DeferredLogTests.fatalWithThrowable", "org.springframework.boot.logging.DeferredLogTests.isTraceEnabled", "org.springframework.boot.logging.DeferredLogTests.info", "org.springframework.boot.logging.DeferredLogTests.isInfoEnabled", "org.springframework.boot.logging.DeferredLogTests.infoWithThrowable", "org.springframework.boot.logging.DeferredLogTests.isFatalEnabled", "org.springframework.boot.logging.DeferredLogTests.isDebugEnabled", "org.springframework.boot.logging.DeferredLogTests.isErrorEnabled", "org.springframework.boot.logging.java.JavaLoggingSystemTests.getLoggingConfiguration", "org.springframework.boot.logging.java.JavaLoggingSystemTests.getLoggingConfigurations", "org.springframework.boot.logging.java.JavaLoggingSystemTests.testSystemPropertyInitializesFormat", "org.springframework.boot.logging.java.JavaLoggingSystemTests.getSupportedLevels", "org.springframework.boot.logging.java.JavaLoggingSystemTests.testNonexistentConfigLocation", "org.springframework.boot.logging.java.JavaLoggingSystemTests.noFile", "org.springframework.boot.logging.java.JavaLoggingSystemTests.testNonDefaultConfigLocation", "org.springframework.boot.logging.java.JavaLoggingSystemTests.setLevel", "org.springframework.boot.logging.java.JavaLoggingSystemTests.testCustomFormatter", "org.springframework.boot.logging.java.JavaLoggingSystemTests.setLevelToNull", "org.springframework.boot.logging.java.JavaLoggingSystemTests.withFile", "org.springframework.boot.logging.log4j2.ColorConverterTests.blue", "org.springframework.boot.logging.log4j2.ColorConverterTests.yellow", "org.springframework.boot.logging.log4j2.ColorConverterTests.cyan", "org.springframework.boot.logging.log4j2.ColorConverterTests.red", "org.springframework.boot.logging.log4j2.ColorConverterTests.faint", "org.springframework.boot.logging.log4j2.ColorConverterTests.magenta", "org.springframework.boot.logging.log4j2.ColorConverterTests.green", "org.springframework.boot.logging.log4j2.ColorConverterTests.highlightWarn", "org.springframework.boot.logging.log4j2.ColorConverterTests.highlightDebug", "org.springframework.boot.logging.log4j2.ColorConverterTests.highlightTrace", "org.springframework.boot.logging.log4j2.ColorConverterTests.highlightError", "org.springframework.boot.logging.log4j2.ColorConverterTests.highlightFatal", "org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverterTests.noStackTrace", "org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverterTests.withStackTrace", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.beforeInitializeFilterDisablesErrorLogging", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.withFile", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithJacksonDatabind", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.testNonexistentConfigLocation", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithJacksonDatabindAndDataformatYaml", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.testNonDefaultConfigLocation", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithJacksonDataformatYaml", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.springConfigLocations", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.configLocationsWithNoExtraDependencies", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevelToNull", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.customExceptionConversionWord", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevelOfUnconfiguredLoggerDoesNotAffectRootConfiguration", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.exceptionsIncludeClassPackaging", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevel", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.getLoggingConfiguration", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.noFile", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.getLoggingConfigurations"], "result": "ERROR"}, "name": "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.loggingThatUsesJulIsCaptured", "intended": {"testRunId": "1601968421689-b430d137-1310-41d8-9732-77e936c14425", "order": ["org.springframework.boot.builder.SpringApplicationBuilderTests.profileAndProperties", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentWithDifferentProfile", "org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesAsMap", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstWithDifferentProfileAndExplicitEnvironment", "org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesAsProperties", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstWithDifferentProfile", "org.springframework.boot.builder.SpringApplicationBuilderTests.propertiesWithRepeatSeparator", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstCreationWithProfileAndDefaultArgs", "org.springframework.boot.builder.SpringApplicationBuilderTests.sourcesWithBoundSources", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentFirstCreation", "org.springframework.boot.builder.SpringApplicationBuilderTests.specificApplicationContextClass", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextWithClassLoader", "org.springframework.boot.builder.SpringApplicationBuilderTests.contextWithClassLoader", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextIdentical", "org.springframework.boot.builder.SpringApplicationBuilderTests.initializersCreatedOnce", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationWithChildShutdown", "org.springframework.boot.builder.SpringApplicationBuilderTests.initializersCreatedOnceForChild", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationThatIsRunDirectly", "org.springframework.boot.builder.SpringApplicationBuilderTests.initializersIncludeDefaults", "org.springframework.boot.builder.SpringApplicationBuilderTests.parentContextCreationThatIsBuiltThenRun", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceAsFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsNoMatch", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceDefaultsToFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsComplex", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResourceFromAdditionalLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileExpressionsAnd", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.systemPropertyWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlProfileCanBeChanged", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertiesFromCustomPropertySourceLoaderShouldBeUsed", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaPropertyDuplicateEnvironmentWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertiesFromCustomPropertySourceLoaderShouldBeUsedWithSpecificResource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaPropertyDuplicate", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentAndViaProperty", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationAndNonActiveProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilePropertiesUsedInPlaceholders", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationInProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificNameAndProfileFromExistingSource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationMultipleLocations", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.randomValue", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationMultipleLocationsAndName", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationWithPlaceholder", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.propertySourceAnnotationWithName", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.specificResource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileSubDocumentInDifferentProfileSpecificFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileSubDocumentInSameProfileSpecificFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profilesAddedToEnvironmentViaActiveAndIncludeProperty", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.twoProfilesFromProperties", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlNegatedProfilesWithProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlNegatedProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoOfThreePropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.additionalLocationTakesPrecedenceOverDefaultLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.commandLineWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.additionalProfilesCanBeIncludedFromAnyPropertySource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadProfileEmptySameAsNotSpecified", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadCustomResource", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultPropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.lastAdditionalLocationWins", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultYamlDocument", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.includeLoop", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadDefaultYamlDocumentNotActivated", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.defaultPropertyAsFallbackDuringFileParsing", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.absoluteResourceDefaultsToFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.defaultPropertyAsFallback", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.activateProfileFromProfileSpecificProperties", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfileAndActiveFromFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.activeProfilesCanBeConfiguredUsingPlaceholdersResolvedAgainstTheEnvironment", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfileAndActive", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.addBeforeDefaultProperties", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.customDefaultProfile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesWithOverride", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesAndSwitchOneOff", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesActivatedInSpringApplication", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesAndSwitchOneOffFromSpecificLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesThenProfilePropertiesActivatedInFirst", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadTwoPropertiesFilesWithProfilesUsingAdditionalLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadPropertiesFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.loadYamlFile", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.profileCanBeIncludedWithoutAnyBeingActive", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.localFileTakesPrecedenceOverClasspath", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.postProcessorsAreOrderedCorrectly", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.locationReplaceDefaultLocation", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.multiValueSpringProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.moreSpecificLocationTakesPrecedenceOverRoot", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfilesWithWhitespace", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfilesWhenListProvided", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlTwoProfiles", "org.springframework.boot.context.config.ConfigFileApplicationListenerTests.yamlSetsMultiProfiles", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNonIterableShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNestedShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNonSequentialShouldThrowException", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNestedListShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNotInOrderShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenMultipleSourceShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenIndexedAndCommaListShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenStringShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenHasSpacesShouldTrim", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToCollectionShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenHasExistingCollectionShouldReplaceAllContents", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldBindCharArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenEmptyStringShouldReturnEmptyArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldReturnArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenCommaListShouldReturnPopulatedArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldReturnPrimitiveArray", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayWhenCommaListAndIndexedShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.ArrayBinderTests.bindToArrayShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenTypeIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenPrimitiveWithExistingValueWrapperShouldNotThrowException", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWithExistingValueShouldSetTypeAndExistingValue", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeWhenExistingValueIsNotInstanceOfTypeShouldThrowException", "org.springframework.boot.context.properties.bind.BindableTests.toStringShouldShowDetails", "org.springframework.boot.context.properties.bind.BindableTests.ofTypeShouldSetType", "org.springframework.boot.context.properties.bind.BindableTests.withAnnotationsShouldSetAnnotations", "org.springframework.boot.context.properties.bind.BindableTests.ofInstanceShouldSetTypeAndExistingValue", "org.springframework.boot.context.properties.bind.BindableTests.equalsAndHashCode", "org.springframework.boot.context.properties.bind.BindableTests.ofClassWithExistingValueShouldSetTypeAndExistingValue", "org.springframework.boot.context.properties.bind.BindableTests.getAnnotationsShouldReturnEmptyArray", "org.springframework.boot.context.properties.bind.BindableTests.ofClassWhenTypeIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindableTests.getAnnotationWhenMatchShouldReturnAnnotation", "org.springframework.boot.context.properties.bind.BindableTests.ofClassShouldSetType", "org.springframework.boot.context.properties.bind.BindableTests.getAnnotationWhenNoMatchShouldReturnNull", "org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenPrimitiveShouldReturnBoxedType", "org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenNotBoxedShouldReturnType", "org.springframework.boot.context.properties.bind.BindableTests.getBoxedTypeWhenPrimitiveArrayShouldReturnBoxedType", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorForArrayElementShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenNotPropertyEditorAndConversionServiceCannotConvertShouldReturnFalse", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorForCollectionElementShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.fallsBackToApplicationConversionService", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenNotPropertyEditorAndConversionServiceCannotConvertShouldThrowException", "org.springframework.boot.context.properties.bind.BindConverterTests.createWhenConversionServiceIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorForCollectionElementShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.createWhenPropertyEditorInitializerIsNotNullShouldUseToInitialize", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorForArrayElementShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.createWhenPropertyEditorInitializerIsNullShouldCreate", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasEditorByConventionShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenConversionServiceCanConvertShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasDefaultEditorShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasCustomEditorShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenHasCustomEditorShouldConvert", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasDefaultEditorShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenConvertingToFileShouldExcludeFileEditor", "org.springframework.boot.context.properties.bind.BindConverterTests.canConvertWhenHasEditorByConventionShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindConverterTests.convertWhenConversionServiceCanConvertShouldConvert", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenNameIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnPropertyValue", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenTargetIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnConvertedPropertyValue", "org.springframework.boot.context.properties.bind.BinderTests.bindWithEmptyPrefixShouldIgnorePropertiesWithEmptyName", "org.springframework.boot.context.properties.bind.BinderTests.bindToValidatedBeanWithResourceAndNonEnumerablePropertySource", "org.springframework.boot.context.properties.bind.BinderTests.bindExceptionWhenBeanBindingFailsShouldHaveNullConfigurationProperty", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanWhenNonIterableShouldReturnPopulatedBean", "org.springframework.boot.context.properties.bind.BinderTests.bindToBeanWithCycle", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanWhenHasPropertyWithSameNameShouldStillBind", "org.springframework.boot.context.properties.bind.BinderTests.bindToBeanWithUnresolvableGenerics", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.BinderTests.bindToJavaBeanShouldReturnPopulatedBean", "org.springframework.boot.context.properties.bind.BinderTests.createWhenSourcesIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithCustomPropertyEditorShouldReturnConvertedValue", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithMissingPlaceholderShouldResolveToValueWithPlaceholder", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWhenPropertyIsMissingShouldReturnUnbound", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWithPlaceholdersShouldResolve", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueWhenMultipleCandidatesShouldReturnFirst", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenHasAnnotationsShouldChangeConvertedValue", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.BinderTests.bindWhenHasMalformedDateShouldThrowException", "org.springframework.boot.context.properties.bind.BinderTests.bindToValueShouldReturnPropertyValueFromSecondSource", "org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenHasValueNoShouldReturnCreatedValue", "org.springframework.boot.context.properties.bind.BindResultTests.orElseCreateWhenTypeIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.ofWhenValueIsNullShouldReturnUnbound", "org.springframework.boot.context.properties.bind.BindResultTests.orElseGetWhenHasValueNoShouldReturnOther", "org.springframework.boot.context.properties.bind.BindResultTests.ofWhenHasValueShouldReturnBoundResultOfValue", "org.springframework.boot.context.properties.bind.BindResultTests.orElseGetWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.mapWhenMapperIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.orElseThrowWhenHasNoValueShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.mapWhenHasValueShouldCallMapper", "org.springframework.boot.context.properties.bind.BindResultTests.orElseThrowWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.mapWhenHasNoValueShouldNotCallMapper", "org.springframework.boot.context.properties.bind.BindResultTests.orElseWhenHasValueNoShouldReturnOther", "org.springframework.boot.context.properties.bind.BindResultTests.isBoundWhenHasValueShouldReturnTrue", "org.springframework.boot.context.properties.bind.BindResultTests.orElseWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.isBoundWhenHasNoValueShouldFalse", "org.springframework.boot.context.properties.bind.BindResultTests.getWhenHasNoValueShouldThrowException", "org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenHasValueShouldCallConsumer", "org.springframework.boot.context.properties.bind.BindResultTests.getWhenHasValueShouldReturnValue", "org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenHasNoValueShouldNotCallConsumer", "org.springframework.boot.context.properties.bind.BindResultTests.hashCodeAndEquals", "org.springframework.boot.context.properties.bind.BindResultTests.ifBoundWhenConsumerIsNullShouldThrowException", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenIndexedAndCommaListShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenHasExistingCollectionShouldReplaceAllContents", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenItemContainsCommasShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenHasExistingCollectionButNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenMultipleSourceShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenEmptyStringShouldReturnEmptyCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNestedShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListWithPlaceholdersShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNonIterableShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNonSequentialShouldThrowException", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenCommaListAndIndexedShouldOnlyUseFirst", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNotInOrderShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWhenStringShouldUsePropertyEditor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldRespectCollectionType", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWithDefaultConstructor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionShouldAlsoCallSetterIfPresent", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToCollectionWithNoDefaultConstructor", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithNestedCollectionShouldPopulateCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToImmutableCollectionShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithNestedCollectionAndNonIterableSourceShouldNotFail", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToListShouldAllowDuplicateValues", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithExceptionInGetterForExistingValue", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNestedCollectionWhenEmptyStringShouldReturnEmptyCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToBeanWithClonedArray", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNonScalarCollectionShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToSetShouldReturnPopulatedCollection", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToNonScalarCollectionWhenNonSequentialShouldThrowException", "org.springframework.boot.context.properties.bind.CollectionBinderTests.bindToSetShouldNotAllowDuplicateValues", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindNested", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterAndImmutableShouldThrowException", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToCollection", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoPrefixShouldCreateBoundBean", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToList", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldNotInvokeExtraMethods", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToMap", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldLeaveDefaults", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenHasNoSetterShouldBindToSet", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldIgnoreStaticAccessors", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenIterableShouldBindNestedBasedOnInstance", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldIgnoreInvalidAccessors", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenMismatchedGetSetShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldCreateBoundBean", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenNoDefaultConstructorShouldReturnUnbound", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToSet", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenNotIterableShouldNotBindNestedBasedOnInstance", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToMap", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertiesMissingShouldReturnUnbound", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToList", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertyCannotBeConvertedAndIgnoreErrorsShouldNotSetValue", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToCollectionWithDelimiter", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWhenPropertyCannotBeConvertedShouldThrowException", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindToCollection", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassWithSelfReferenceShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindNested", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToExistingInstanceShouldLeaveDefaults", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToClassShouldBindHierarchy", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceShouldBindToInstance", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindWithAnnotations", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWhenNoDefaultConstructorShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindWhenValueIsConvertedWithPropertyEditorShouldBind", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWhenNoNestedShouldLeaveNestedAsNull", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToListIfUnboundElementsPresentShouldThrowException", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWithExistingValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.JavaBeanBinderTests.bindToInstanceWithNoPropertiesShouldReturnUnbound", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithCustomConverter", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoDefaultConstructor", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenNoValueShouldReturnUnbound", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoPropertiesShouldReturnUnbound", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMultipleInSameSourceCandidateShouldBindFirst", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNumberKeyAndCommaSeparated", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMultipleCandidateShouldBindFirst", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToListOfMaps", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldRespectMapType", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapNonScalarCollectionShouldPopulateMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldNotTreatClassWithStringConstructorAsScalar", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapNonScalarCollectionWithDotKeysShouldBind", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldConvertMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBeGreedyForScalars", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenEmptyRootNameShouldBindMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBeGreedyForStrings", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringCollectionWithDotKeysShouldPreserveDot", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldConvertKey", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldReturnPopulatedMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToImmutableMapShouldReturnPopulatedMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToBeanWithExceptionInGetterForExistingValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayShouldTriggerOnSuccess", "org.springframework.boot.context.properties.bind.MapBinderTests.bindingWithSquareBracketMap", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayWithDotKeysAndCommaSeparatedShouldPreserveDot", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBindToMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapStringArrayWithDotKeysShouldPreserveDot", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapShouldBindNestedMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithDefaultConstructor", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToPropertiesShouldBeEquivalentToMapOfStringString", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithEmptyPrefix", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPropertyEditorForValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenHasExistingMapShouldReplaceOnlyNewContents", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPropertyEditorForKey", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMapValueIsObjectAndNoRootShouldBindNestedMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithPlaceholdersShouldBeGreedyForScalars", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWhenMapValueIsObjectShouldBindNestedMapValue", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNumberKeyAndIndexed", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithNoConverterForValue", "org.springframework.boot.context.properties.bind.MapBinderTests.nestedMapsShouldNotBindToNull", "org.springframework.boot.context.properties.bind.MapBinderTests.bindToMapWithCustomConverterAndChildElements", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingArrayFromYamlArrayShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadValidatedOnBeanMethodAndJsr303ConstraintDoesNotMatchShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingArrayShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldUseGenericConfigurationConverter", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingCurrentDirectoryToFileShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldUseConfigurationConverter", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingOnlyParentContextShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldSupportRebindableConfigurationProperties", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingOver256ElementsShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldNotInitializeFactoryBeans", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToDataSizeShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToMapWithNumericKey", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToListOfGenericClassShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToMap", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToMapKeyWithPeriodShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToJavaTimeDuration", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingToValidatedImplementationOfInterfaceShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToCharArray", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingTwoBeansShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindToBeanWithGenerics", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithDefaultsInJavaConfigurationShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBindNested", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithDefaultsInXmlShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithoutAndAnnotationShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.customProtocolResolverIsInvoked", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithoutAnnotationValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.customProtocolResolver", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenBindingWithParentContextShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWithPropertyPlaceholderValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationConverterIsNotQualifiedShouldNotConvert", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWithPropertyPlaceholderShouldNotAlterPropertySourceOrder", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationPropertiesContainsMapWithPositiveAndNegativeIntegerKeys", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBindToMap", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenConfigurationPropertiesIsAlsoValidatorShouldApplyValidator", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBindNested", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenDotsInSystemEnvironmentPropertiesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingSystemPropertiesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenFailsShouldIncludeAnnotationDetails", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsShouldBindToEnumSet", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenGenericConfigurationConverterIsNotQualifiedShouldNotConvert", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsShouldBindToEnum", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasConfigurationPropertiesValidatorShouldApplyValidator", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenUsingRelaxedFormsAndOverrideShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasCustomPropertyEditorShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenTopLevelConverterNotFoundExceptionShouldNotFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreInvalidFieldsTrueAndInvalidFieldsShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenSetterThrowsValidationExceptionShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreUnknownFieldsFalseAndNoUnknownFieldsShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPropertiesHaveAnnotationOnBaseClassShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasIgnoreUnknownFieldsFalseAndUnknownFieldsShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesDeclaredAsBeanShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasMultiplePropertySourcesPlaceholderConfigurerShouldLogWarning", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesDeclaredAsAnnotationValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPostConstructShouldTriggerPostConstructWithBoundBean", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenPrefixedPropertiesAreReplacedOnBeanMethodShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPrefixShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenOverridingPropertiesWithPlaceholderResolutionInEnvironmentShouldBindWithOverride", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasPropertySourcesPlaceholderConfigurerShouldSupportRebindableConfigurationProperties", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenOverridingPropertiesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasUnboundElementsFromSystemEnvironmentShouldNotThrowException", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenMultiplePrefixedPropertiesDeclaredAsAnnotationValueShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenHasUnsupportedConfigurationPropertiesValidatorShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintMatchesShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchAndNotValidatedAnnotationShouldBind", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedButIsValidShouldFail", "org.springframework.boot.context.properties.ConfigurationPropertiesTests.loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedShouldFail", "org.springframework.boot.context.properties.PropertyMapperTests.whenFalseWhenValueIsFalseShouldMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueIsEmptyShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenEqualToWhenValueIsNotEqualShouldNotMatch", "org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueIsNullShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenEqualToWhenValueIsEqualShouldMatch", "org.springframework.boot.context.properties.PropertyMapperTests.whenInstanceOfWhenValueIsNotTargetTypeShouldNotMatch", "org.springframework.boot.context.properties.PropertyMapperTests.toWhenConsumerIsNullShouldThrowException", "org.springframework.boot.context.properties.PropertyMapperTests.whenInstanceOfWhenValueIsTargetTypeShouldMatch", "org.springframework.boot.context.properties.PropertyMapperTests.toShouldMapFromSupplier", "org.springframework.boot.context.properties.PropertyMapperTests.whenNonNullWhenSuppliedNullShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromWhenSupplierIsNullShouldThrowException", "org.springframework.boot.context.properties.PropertyMapperTests.whenNonNullWhenSuppliedThrowsNullPointerExceptionShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromValueAsIntShouldAdaptValue", "org.springframework.boot.context.properties.PropertyMapperTests.whenTrueWhenValueIsFalseShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromValueAlwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource", "org.springframework.boot.context.properties.PropertyMapperTests.whenTrueWhenValueIsTrueShouldMap", "org.springframework.boot.context.properties.PropertyMapperTests.fromValue", "org.springframework.boot.context.properties.PropertyMapperTests.whenWhenCombinedWithAsUsesSourceValue", "org.springframework.boot.context.properties.PropertyMapperTests.fromNullValue", "org.springframework.boot.context.properties.PropertyMapperTests.whenWhenValueDoesNotMatchShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.asWhenAdapterIsNullShouldThrowException", "org.springframework.boot.context.properties.PropertyMapperTests.alwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource", "org.springframework.boot.context.properties.PropertyMapperTests.asShouldAdaptSupplier", "org.springframework.boot.context.properties.PropertyMapperTests.asIntShouldAdaptSupplier", "org.springframework.boot.context.properties.PropertyMapperTests.whenWhenValueMatchesShouldMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenFalseWhenValueIsTrueShouldNotMap", "org.springframework.boot.context.properties.PropertyMapperTests.whenHasTextWhenValueHasTextShouldMap", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMissingOpenBracket", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.equalsWhenStartsWith", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isEmptyWhenEmptyShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInOriginalFormShouldReturnElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenSameShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getLastElementShouldGetLastElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getNumberOfElementsShouldReturnNumberOfElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.compareDifferentLengthsShouldSortNames", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenGrandparentShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementShouldNotIncludeAngleBrackets", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenParentShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInUniformFormShouldReturnElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isAncestorOfWhenRootShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getElementInUniformFormShouldNotIncludeDashes", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldUseElementValueProcessor", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenNotIndexedShouldAppendWithDot", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptUnderscoreShouldReturnEmpty", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenIndexedShouldAppendWithBrackets", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptWhenElementValueProcessorIsNullShouldAdapt", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameMultiDotShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldCreateName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameIsNullShouldReturnName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptWhenNameIsNullShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenEqualToSizeShouldReturnExisting", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportUnderscore", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenGreaterThanSizeShouldReturnExisting", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportMixedCase", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.chopWhenLessThenSizeShouldReturnChopped", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldSupportIndexedElements", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.appendWhenElementNameIsNotValidShouldThrowException", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.adaptShouldStripInvalidChars", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.compareShouldSortNames", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.getLastElementWhenEmptyShouldReturnEmptyString", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.equalsAndHashCode", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMissingCloseBracket", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithUppercaseInAssociativeElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDoubleRunOnAndAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isLastElementIndexedWhenIndexedShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotBeNull", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isLastElementIndexedWhenNotIndexedShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDotOnAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenGrandparentShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDotAndAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenParentShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotStartWithDot", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isValidWhenValidShouldReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotContainInvalidChars", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isEmptyWhenNotEmptyShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotContainUppercase", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isValidWhenNotValidShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotEndWithDot", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenSameShouldReturnFalse", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameShouldNotStartWithDash", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.isParentOfWhenRootReturnTrue", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenNestedBrackets", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.toStringFromOfShouldBeLowerCaseDashed", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenRunOnAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofWhenNameIsEmptyShouldReturnEmptyName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenSimple", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithWhitespaceInName", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenDoubleDotAndAssociative", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWithWhitespaceInAssociativeElement", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenStartsWithNumber", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.toStringShouldBeLowerCaseDashed", "org.springframework.boot.context.properties.source.ConfigurationPropertyNameTests.ofNameWhenMultipleMismatchedBrackets", "org.springframework.boot.convert.DurationStyleTests.detectWhenUnknownShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectWhenSimpleShouldReturnSimple", "org.springframework.boot.convert.DurationStyleTests.parseIso8601ShouldParse", "org.springframework.boot.convert.DurationStyleTests.detectWhenIso8601ShouldReturnIso8601", "org.springframework.boot.convert.DurationStyleTests.parseIso8601WhenSimpleShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenValueIsNullShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.parseIso8601WithUnitShouldIgnoreUnit", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleWithoutSuffixShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleShouldParse", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleWithoutSuffixButWithChronoUnitShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleWhenIso8601ShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleSecondsShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleWhenUnknownUnitShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleNanosShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.parseSimpleWithUnitShouldUseUnitAsFallback", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMinutesShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.printIso8601ShouldIgnoreUnit", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMillisShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.printIso8601ShouldPrint", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleMicrosShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.printSimpleWithoutUnitShouldPrintInMs", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleHoursShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.printSimpleWithUnitShouldPrintInUnit", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenSimpleDaysShouldReturnDuration", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenBadFormatShouldThrowException", "org.springframework.boot.convert.DurationStyleTests.detectAndParseWhenIso8601ShouldReturnDuration", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithISO88591Character", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSeparatorInValue", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithFormFeed", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSeparatorSurroundedBySpaces", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithEmptyValue", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithSpaceSeparator", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithCarriageReturn", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithTab", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBang", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithTrailingSpace", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBackslashEscapedInValue", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithValueComment", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithBackslashEscaped", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithWhiteSpace", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getMultiline", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithWhitespaceAfterKey", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getMalformedUnicodeProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getSimpleProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getListProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getSimplePropertyWithColonSeparator", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getImmediateMultiline", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.compareToJavaProperties", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getEscapedProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getCommentedOutPropertyShouldBeNull", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getUnicodeProperty", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithMultilineImmediateBang", "org.springframework.boot.env.OriginTrackedPropertiesLoaderTests.getPropertyWithNewLine", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBigDecimalShouldReturnBigDecimal", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsShortShouldReturnShort", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBigIntegerShouldReturnBigInteger", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsNullShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsBooleanShouldReturnBoolean", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsLongShouldReturnLong", "org.springframework.boot.jackson.JsonObjectDeserializerTests.deserializeObjectShouldReadJson", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsIntegerShouldReturnInteger", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsDoubleShouldReturnDouble", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsStringShouldReturnString", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenTreeIsNullShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsUnknownShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsNullShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenValueIsNullShouldReturnNull", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsNullNodeShouldThrowException", "org.springframework.boot.jackson.JsonObjectDeserializerTests.nullSafeValueWhenClassIsFloatShouldReturnFloat", "org.springframework.boot.jackson.JsonObjectDeserializerTests.getRequiredNodeWhenNodeIsFoundShouldReturnNode", "org.springframework.boot.json.BasicJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.BasicJsonParserTests.simpleList", "org.springframework.boot.json.BasicJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.simpleMap", "org.springframework.boot.json.BasicJsonParserTests.mapOfLists", "org.springframework.boot.json.BasicJsonParserTests.stringContainingComma", "org.springframework.boot.json.BasicJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.stringContainingNumber", "org.springframework.boot.json.BasicJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.doubleValue", "org.springframework.boot.json.BasicJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.emptyList", "org.springframework.boot.json.BasicJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.BasicJsonParserTests.emptyMap", "org.springframework.boot.json.BasicJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.BasicJsonParserTests.escapeQuote", "org.springframework.boot.json.BasicJsonParserTests.listOfMaps", "org.springframework.boot.json.GsonJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.GsonJsonParserTests.simpleList", "org.springframework.boot.json.GsonJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.simpleMap", "org.springframework.boot.json.GsonJsonParserTests.mapOfLists", "org.springframework.boot.json.GsonJsonParserTests.stringContainingComma", "org.springframework.boot.json.GsonJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.stringContainingNumber", "org.springframework.boot.json.GsonJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.doubleValue", "org.springframework.boot.json.GsonJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.emptyList", "org.springframework.boot.json.GsonJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.GsonJsonParserTests.emptyMap", "org.springframework.boot.json.GsonJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.GsonJsonParserTests.escapeQuote", "org.springframework.boot.json.GsonJsonParserTests.listOfMaps", "org.springframework.boot.json.JacksonJsonParserTests.escapeQuote", "org.springframework.boot.json.JacksonJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.JacksonJsonParserTests.instanceWithSpecificObjectMapper", "org.springframework.boot.json.JacksonJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.listOfMaps", "org.springframework.boot.json.JacksonJsonParserTests.mapOfLists", "org.springframework.boot.json.JacksonJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.stringContainingNumber", "org.springframework.boot.json.JacksonJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.JacksonJsonParserTests.stringContainingComma", "org.springframework.boot.json.JacksonJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.emptyMap", "org.springframework.boot.json.JacksonJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.emptyList", "org.springframework.boot.json.JacksonJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.doubleValue", "org.springframework.boot.json.JacksonJsonParserTests.simpleList", "org.springframework.boot.json.JacksonJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.JacksonJsonParserTests.simpleMap", "org.springframework.boot.json.JacksonJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapWithListThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapWithLeadingWhitespaceListThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapWithNullThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.mapWithLeadingWhitespace", "org.springframework.boot.json.YamlJsonParserTests.simpleList", "org.springframework.boot.json.YamlJsonParserTests.mapWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.simpleMap", "org.springframework.boot.json.YamlJsonParserTests.mapOfLists", "org.springframework.boot.json.YamlJsonParserTests.stringContainingComma", "org.springframework.boot.json.YamlJsonParserTests.listWithNullThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.stringContainingNumber", "org.springframework.boot.json.YamlJsonParserTests.listWithMapThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.doubleValue", "org.springframework.boot.json.YamlJsonParserTests.listWithLeadingWhitespaceMapThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.emptyList", "org.springframework.boot.json.YamlJsonParserTests.listWithLeadingWhitespace", "org.springframework.boot.json.YamlJsonParserTests.emptyMap", "org.springframework.boot.json.YamlJsonParserTests.listWithEmptyStringThrowsARuntimeException", "org.springframework.boot.json.YamlJsonParserTests.escapeQuote", "org.springframework.boot.json.YamlJsonParserTests.listOfMaps", "org.springframework.boot.logging.DeferredLogTests.isWarnEnabled", "org.springframework.boot.logging.DeferredLogTests.isTraceEnabled", "org.springframework.boot.logging.DeferredLogTests.switchTo", "org.springframework.boot.logging.DeferredLogTests.isInfoEnabled", "org.springframework.boot.logging.DeferredLogTests.trace", "org.springframework.boot.logging.DeferredLogTests.isFatalEnabled", "org.springframework.boot.logging.DeferredLogTests.traceWithThrowable", "org.springframework.boot.logging.DeferredLogTests.isErrorEnabled", "org.springframework.boot.logging.DeferredLogTests.warn", "org.springframework.boot.logging.DeferredLogTests.isDebugEnabled", "org.springframework.boot.logging.DeferredLogTests.warnWithThrowable", "org.springframework.boot.logging.DeferredLogTests.infoWithThrowable", "org.springframework.boot.logging.DeferredLogTests.clearsOnReplayTo", "org.springframework.boot.logging.DeferredLogTests.info", "org.springframework.boot.logging.DeferredLogTests.debug", "org.springframework.boot.logging.DeferredLogTests.fatalWithThrowable", "org.springframework.boot.logging.DeferredLogTests.debugWithThrowable", "org.springframework.boot.logging.DeferredLogTests.fatal", "org.springframework.boot.logging.DeferredLogTests.error", "org.springframework.boot.logging.DeferredLogTests.errorWithThrowable", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevelOfUnconfiguredLoggerDoesNotAffectRootConfiguration", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevel", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.setLevelToNull", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.noFile", "org.springframework.boot.logging.log4j2.Log4J2LoggingSystemTests.springConfigLocations"], "result": "PASS"}}]}
